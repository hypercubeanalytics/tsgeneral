[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tsgeneral",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "tsgeneral",
    "section": "Install",
    "text": "Install\npip install tsgeneral"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "tsgeneral",
    "section": "How to use",
    "text": "How to use\nread\n\npath=\"https://demo-time-series.s3.us-east-2.amazonaws.com/no_error_file_valid_ex.csv\"\n\nrs=read(\"csv\",path)\nrs\n\n(True,\n    emp_id emp_name  emp_salary        date\n 0       1   rakesh       10.55  01-02-2020\n 1       2   ramesh       23.55  02-02-2020\n 2       3  radhesh       23.55  03-02-2020\n 3       4   ravesh       40.45  04-02-2020\n 4       5   ralesh       45.88  05-02-2020)\n\n\ncreate_schema\n\ncol_dict = {\"emp_id\": int, \n            \"emp_name\": str,\n            \"emp_salary\": float, \n            \"date\": (\"date\", \"%-%m-%Y\"),\n           }\n\ncreate_schema(col_dict)\n\n(True,\n {'emp_id': {'type': 'integer', 'coerce': int},\n  'emp_name': {'type': 'string', 'coerce': str},\n  'emp_salary': {'type': 'float', 'coerce': float},\n  'date': {'type': 'datetime',\n   'coerce': <function tsgeneral.hcingest.create_schema.<locals>.<lambda>(d)>}})"
  },
  {
    "objectID": "ingest.html",
    "href": "ingest.html",
    "title": "ingest",
    "section": "",
    "text": "source\n\nread\n\n read (file_type:str, file_path:str)\n\nThis function read helps to read any of a csv,excel and parquet file, and returns a pandas dataframe.\n\n\n\n\nType\nDetails\n\n\n\n\nfile_type\nstr\n\n\n\nfile_path\nstr\n\n\n\nReturns\ntuple\n\n\n\n\n\nfrom pprint import pprint\n\n\n\nValid test case\n\npath=\"https://demo-time-series.s3.us-east-2.amazonaws.com/no_error_file_valid_ex.csv\"\n\nrs=read(\"csv\",path)\nrs\n\n(True,\n    emp_id emp_name  emp_salary        date\n 0       1   rakesh       10.55  01-02-2020\n 1       2   ramesh       23.55  02-02-2020\n 2       3  radhesh       23.55  03-02-2020\n 3       4   ravesh       40.45  04-02-2020\n 4       5   ralesh       45.88  05-02-2020)\n\n\n\n\nFailing Test Cases - invalid URL\n\npath=\"https://demo-time-series.s3.us-east-2.amazonaws.com/_error_file_valid_ex.csv\"\n\nrs=read(\"csv\",path)\nrs[1]['error']\n\n('URL not found,invalid URL',\n 'Traceback (most recent call last):\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_58660\\\\2984043852.py\", line 31, in read\\n    df = pd.read_csv(file_path)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\util\\\\_decorators.py\", line 311, in wrapper\\n    return func(*args, **kwargs)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 586, in read_csv\\n    return _read(filepath_or_buffer, kwds)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 482, in _read\\n    parser = TextFileReader(filepath_or_buffer, **kwds)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 811, in __init__\\n    self._engine = self._make_engine(self.engine)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 1040, in _make_engine\\n    return mapping[engine](self.f, **self.options)  # type: ignore[call-arg]\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\c_parser_wrapper.py\", line 51, in __init__\\n    self._open_handles(src, kwds)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\base_parser.py\", line 222, in _open_handles\\n    self.handles = get_handle(\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\common.py\", line 609, in get_handle\\n    ioargs = _get_filepath_or_buffer(\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\common.py\", line 312, in _get_filepath_or_buffer\\n    with urlopen(req_info) as req:\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\common.py\", line 212, in urlopen\\n    return urllib.request.urlopen(*args, **kwargs)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\urllib\\\\request.py\", line 216, in urlopen\\n    return opener.open(url, data, timeout)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\urllib\\\\request.py\", line 525, in open\\n    response = meth(req, response)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\urllib\\\\request.py\", line 634, in http_response\\n    response = self.parent.error(\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\urllib\\\\request.py\", line 563, in error\\n    return self._call_chain(*args)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\urllib\\\\request.py\", line 496, in _call_chain\\n    result = func(*args)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\urllib\\\\request.py\", line 643, in http_error_default\\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)\\nurllib.error.HTTPError: HTTP Error 403: Forbidden\\n')\n\n\n\n\nFailing test case - invalid format\n\npath=\"https://demo-time-series.s3.us-east-2.amazonaws.com/no_error_file_valid_ex.csv\"\n\nrs=read(\"excel\",path)\nrs\n\n(False,\n {'error': ('corrupted data or wrong file format',\n   'Traceback (most recent call last):\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_58660\\\\2984043852.py\", line 33, in read\\n    df = pd.read_excel(file_path)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\util\\\\_decorators.py\", line 311, in wrapper\\n    return func(*args, **kwargs)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\excel\\\\_base.py\", line 364, in read_excel\\n    io = ExcelFile(io, storage_options=storage_options, engine=engine)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\excel\\\\_base.py\", line 1195, in __init__\\n    raise ValueError(\\nValueError: Excel file format cannot be determined, you must specify an engine manually.\\n')})\n\n\n\n\ninvalid path\n\npath=\"some/invalid/path.csv\"\n\nrs=read(\"csv\",path)\nrs\n\n(False,\n {'error': ('File not found please check file path',\n   'Traceback (most recent call last):\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_58660\\\\2984043852.py\", line 31, in read\\n    df = pd.read_csv(file_path)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\util\\\\_decorators.py\", line 311, in wrapper\\n    return func(*args, **kwargs)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 586, in read_csv\\n    return _read(filepath_or_buffer, kwds)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 482, in _read\\n    parser = TextFileReader(filepath_or_buffer, **kwds)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 811, in __init__\\n    self._engine = self._make_engine(self.engine)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\readers.py\", line 1040, in _make_engine\\n    return mapping[engine](self.f, **self.options)  # type: ignore[call-arg]\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\c_parser_wrapper.py\", line 51, in __init__\\n    self._open_handles(src, kwds)\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\parsers\\\\base_parser.py\", line 222, in _open_handles\\n    self.handles = get_handle(\\n  File \"C:\\\\Users\\\\anant\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\pandas\\\\io\\\\common.py\", line 702, in get_handle\\n    handle = open(\\nFileNotFoundError: [Errno 2] No such file or directory: \\'some/invalid/path.csv\\'\\n')})\n\n\n\nsource\n\n\ncreate_schema\n\n create_schema (col_dict:dict)\n\nThis function create_schema helps to create cerberus schema froma given dictionary and retuns schema for cerberus validation.\n\n\n\n\nType\nDetails\n\n\n\n\ncol_dict\ndict\n\n\n\nReturns\ntuple\n\n\n\n\n\ncol_dict = {\"emp_id\": int, \n            \"emp_name\": str,\n            \"emp_salary\": float, \n            \"date\": (\"date\", \"%-%m-%Y\"),\n           }\n\ncreate_schema(col_dict)\n\n(True,\n {'emp_id': {'type': 'integer', 'coerce': int},\n  'emp_name': {'type': 'string', 'coerce': str},\n  'emp_salary': {'type': 'float', 'coerce': float},\n  'date': {'type': 'datetime',\n   'coerce': <function __main__.create_schema.<locals>.<lambda>(d)>}})"
  }
]